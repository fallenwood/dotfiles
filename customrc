export EDITOR=vim

# Custom

export isWsl=1

if command -v lsb_release &> /dev/null; then
  distro="$(lsb_release -i | cut -d: -f2 | sed s/'^\t'//)"
  grep -qi wsl /proc/version
  export isWsl=$?
else
  distro=$(uname)
  export isWsl=0
fi

# if [ $isWsl = 0 ]; then
#   echo "is wsl"
# else
#   echo "is not wsl"
# fi

if [ $distro = "Ubuntu" ]; then
  isUbuntu=true
elif [ $distro = "Debian" ]; then
  isDebian=true
elif [ $distro = "Darwin" ]; then
  isMac=true
fi

if [ "$isMac" = false ]; then
  export LANG=C.UTF-8
  export LC_ALL=C.UTF-8
fi

# [[ -s "$HOME/.nix-profile/lib/libmimalloc.so" ]] && export LD_PRELOAD="$HOME/.nix-profile/lib/libmimalloc.so"

[[ -s "$HOME/.local/opt/jdk" ]] && export JAVA_HOME=$HOME/.local/opt/jdk

# export PATH=$HOME/.local/opt/miniconda/bin:$PATH
export PATH=$HOME/.local/opt/clang/bin:$PATH
# export PATH=$HOME/.local/opt/gcc/bin:$PATH
# export PATH=$HOME/.local/opt/qemu/bin:$PATH
export PATH=$HOME/.local/bin:$PATH
export PATH=$HOME/.local/opt/dotnet:$PATH
export PATH=$HOME/.local/opt/bazel:$PATH
export PATH=$HOME/.local/opt/gcc_musl/bin:$PATH
export PATH=$HOME/.local/opt/gcc_riscv_musl/bin:$PATH
export PATH=$HOME/.local/opt/gcc_riscv_glibc/bin:$PATH
export PATH=$HOME/.local/opt/gcc_aarch64/bin:$PATH
# export PATH=$HOME/.local/opt/go/bin:$PATH
export PATH=$HOME/.local/opt/ldc2/bin:$PATH
if [[ -n "$JAVA_HOME" ]]; then
  export PATH=$JAVA_HOME/bin:$PATH
fi
export PATH=$HOME/.cargo/bin:$PATH
export PATH=$HOME/.local/opt/xmake/bin:$PATH
export PATH=$HOME/.local/opt/luvit:$PATH
export PATH=$HOME/.local/opt/nushell:$PATH
export PATH=$HOME/.dotnet/tools:$PATH
export PATH=$HOME/.local/opt/go/bin:$PATH
export PATH=$HOME/go/bin:$PATH
export PATH=$HOME/.local/opt/zig:$PATH
export PATH=$HOME/.local/share/gem/ruby/3.1.0/bin:$PATH
export PATH=$HOME/.local/opt/bun:$PATH
export PATH=$HOME/.bun/bin:$PATH
export PATH=$HOME/.local/opt/bflat:$PATH

export PYTHONPATH=$HOME/.nix-profile/lib/python3.11/site-packages:$PYTHONPATH

function setproxy() {
  PROXY=http://192.168.1.128:10801
  export HTTP_PROXY=$PROXY
  export HTTPS_PROXY=$PROXY
  export ALL_PROXY=$PROXY
}

function unsetproxy() {
  export HTTP_PROXY=
  export HTTPS_PROXY=
  export ALL_PROXY=
}

# fedora

#if command -v dnf5 > /dev/null; then
#  alias dnf="sudo dnf5"
#fi

# if command -v dotnet > /dev/null; then
#   export DOTNET_ROOT="$(dotnet --info | grep Base | cut -d ':' -f 2 | xargs dirname | xargs dirname)"
# fi

export DOTNET_ROOT=$HOME/.local/opt/dotnet

export GCM_CREDENTIAL_STORE=cache

if command -v "sudo-rs" &> /dev/null; then
  alias s="sudo-rs"
  alias sudo='sudo-rs env PATH=$PATH PYTHONPATH=$PYTHONPATH'
else
  alias s="sudo"
  alias sudo='sudo env PATH=$PATH PYTHONPATH=$PYTHONPATH'
fi

alias proxychains="proxychains4"
alias pc4="proxychains"
alias pc="proxychains"
alias rm="rm -i"
alias pacman=yay
if command -v nvim > /dev/null; then
  alias vim=nvim
  alias nvimf="NVIM_APPNAME='nvim-lite' nvim"
  alias pnvimf="NVIM_APPNAME='nvim-lite' pc4 nvim"
  alias vimf=nvimf
  alias viml=vimf
  alias nviml=nvimf
  alias nvimss="LUNA_HUBSITE=gh.llkk.cc/https://github.com NVIM_APPNAME='nvim-ss' nvim"
fi
if command -v rg > /dev/null; then
  alias grep=rg
fi
alias k=kubectl
alias e=$EDITOR

alias gdb="LC_ALL=C.UTF-8 gdb"

export QEMU_BASE="$HOME/.local/opt/qemu"

alias qemu-system-x86_64="$QEMU_BASE/build/qemu-system-x86_64 -L $QEMU_BASE/pc-bios -nographic -enable-kvm"
alias qemu-system-aarch64="$QEMU_BASE/build/qemu-system-aarch64 -cpu cortex-a57 -M virt -nographic"

if [ "$isUbuntu" = true ] || [ "$isDebian" =  true ]; then
  alias update='sudo apt update -y && sudo apt upgrade -y && sudo apt remove -y && sudo apt autoclean'
fi

if [ $isWsl = 1 ]; then
  ### Set proxychains to use Windows Shadowsocks
  nameserver=$(tail -1 /etc/resolv.conf | cut -d ' ' -f2)
  echo "strict_chain
  proxy_dns
  remote_dns_subnet 224

  tcp_read_time_out 15000
  tcp_connect_time_out 8000

  [ProxyList]
  socks5 $nameserver 10800
  " >| $HOME/.proxychains/proxychains.conf
fi

# Nodejs
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Ruby
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
[[ -s "$HOME/.rbenv/bin/rbenv" ]] && eval "$(~/.rbenv/bin/rbenv init - bash)"

[[ -s "opam" ]] && eval $(opam env)

# Xmake
[[ -s "$HOME/.xmake/profile" ]] && source "$HOME/.xmake/profile" # load xmake profile

# Python
if command -v conda &> /dev/null; then
  source activate user
fi

[ -s "$HOME/.local/opt/python" ] && \. "$HOME/.local/opt/python/bin/activate" && alias pip="uv pip"

# Pwsh
export POWERSHELL_TELEMETRY_OPTOUT=1
export POWERSHELL_UPDATECHECK_OPTOUT=1
export POWERSHELL_UPDATECHECK=off
export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
alias pwsh="pwsh -nologo"

# Nix
export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1
export NIXPKGS_ALLOW_UNFREE=1

if [ "$isMac" = true ]; then
  export PATH=$HOME/.nix-profile/bin:$PATH
fi

alias nix-update="nix-channel --update && nix-env -irf $HOME/.env.nix"
alias nix-upgrade="nix-channel --update && nix-env -uf $HOME/.env.nix"
alias nix-gc="nix-collect-garbage -d"


# Container
# alias podman="docker"

# Instance configuration
[[ -s "$HOME/.insrc" ]] && source "$HOME/.insrc"

# [[ -s "thefuck" ]] && eval "$(thefuck --alias)"

alias kind="KIND_EXPERIMENTAL_PROVIDER=podman systemd-run --scope --user -p 'Delegate=yes'"

# rust
export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup
export RUSTUP_UPDATE_ROOT=https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup
[[ -s "$HOME/.cargo/env" ]] && . "$HOME/.cargo/env"

systemctl --user import-environment PATH

[[ -s "/usr/bin/toolbox" ]] && alias devbox="toolbox enter devbox"
